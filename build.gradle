/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'einarag' at '10/25/14 12:08 PM' with Gradle 2.1
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at http://gradle.org/docs/2.1/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'application'
apply plugin:  'pmd'


// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

jar {
    baseName = 'TicTacToe'
    version =  '0.1.0'
    manifest {
        attributes  'Main-Class': 'is.ru.TicTacToe.Game',
                    'Built-By': System.getProperty('user.name'),
                    'Built-Date': new Date(),
                    'Built-JDK': System.getProperty('java.version'),
                    'Built-Gradle': gradle.gradleVersion
            
    }
}

sourceSets {
    selenium
    seleniumXvfb    
}



// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.5'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.11'

    compile 'com.sparkjava:spark-core:1.1.1'

    seleniumCompile 'junit:junit:4.11'
    seleniumCompile 'org.seleniumhq.selenium:selenium-java:2.44.0'

    seleniumXvfbCompile 'junit:junit:4.11'
    seleniumXvfbCompile 'org.seleniumhq.selenium:selenium-java:2.44.0'
}

mainClassName = "is.ru.TicTacToe.GameWeb"

task stage { 
    dependsOn installApp 
}

// búa til task sem tekur TicTacToe jar file of færir útfyrir working directory
def jarDir = new File('../TicTacToeGame')

task extractJar {
    doFirst{
        if(!jarDir.isDirectory()){
            jarDir.mkdirs()
        }
    }
    copy {
        from "build/libs/"
        into '../TicTacToeGame'
    }   
}



task selenium(type: Test, dependsOn: installApp) {
    testClassesDir = sourceSets.selenium.output.classesDir
    classpath = sourceSets.selenium.runtimeClasspath

    ant.condition(property: "os", value: "windows") { os(family: "windows") }
    ant.condition(property: "os", value: "unix"   ) { os(family: "unix")    }

    doFirst {
        switch(ant.properties.os) {
            case 'unix':
                'build/install/TicTacToe/bin/TicTacToe &'.execute()
                break
            case 'windows':
                'build\\install\\TicTacToe\\bin\\TicTacToe.bat'.execute()
                break
        }
    }
}


task seleniumXvfb(type: Test, dependsOn: installApp) {
    testClassesDir = sourceSets.selenium.output.classesDir
    classpath = sourceSets.selenium.runtimeClasspath

    environment "DISPLAY", ":99"

    doFirst {
        'sh -e bin/xvfb start'.execute()
        //'sh -e /usr/bin/Xvfb :99 -ac -screen 0 1024x768x8 &'.execute()
        'build/install/TicTacToe/bin/TicTacToe &'.execute()
       
    }
    
    doLast {
        'sh -e bin/xvfb stop'.execute()
    }
}

pmd {
reportsDir = file('build/reports/pmd/html')
ignoreFailures = true
ruleSets = [
'java-android',
'java-basic',
'java-braces',
'java-clone',
'java-coupling',
'java-codesize',
'java-design',
'java-empty',
'java-finalizers',
'java-imports',
'java-j2ee',
'java-junit',
'java-logging-jakarta-commons',
'java-logging-java',
'java-migrating',
'java-optimizations',
'java-strictexception',
'java-strings',
'java-typeresolution',
'java-unnecessary',
'java-unusedcode'
]    
}